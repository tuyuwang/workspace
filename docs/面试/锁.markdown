---
layout: default
title: 锁
nav_order: 2
parent: 面试
---

## 概念

我们在使用多线程的时候多个线程可能会访问同一块资源，这样就很容易引发数据错乱和数据安全等问题，这时候就需要我们保证每次只有一个线程访问这一块资源，锁 应运而生。

效率图:

![image](../../../images/Interview/lock.png)

![lockReal](../../../images/Interview/lockReal.png)
### OSSpinLock 自旋锁

自旋锁的实现原理比较简单，就是死循环。当线程a获得锁以后，b线程想要获取锁就需要等待a线程释放锁。在没有获得锁的期间，b线程会一直处于忙等的状态。自旋锁用在临界区执行时间比较短的环境性能会很高。

OSSpinLock不安全，主要原因是发生在低优先级线程拿到锁时，高优先级线程进入忙等状态，消耗大量CPU时间，从而导致低优先级线程拿不到CPU时间，也就无法完成任务并解锁。这种问题被称为优先级反转。

iOS10.0以后废弃这种锁机制，使用os_unfair_lock替换，能够保证不同优先级的线程申请锁的时候不会发生优先级反转问题.

现代操作系统在管理普通线程时，通常采用时间片轮转算法，每个线程会被分配一段时间片，通常在10-100ms左右。当线程用完属于自己的时间片一后，就会被操作系统挂起，放入等待队列中，直到下一次分配时间片。

### os_unfair_lock 自旋锁

解决不同优先级的线程申请锁的时候不会发生优先级反转问题，相对于OSSpinLock，性能有所减弱

### dispatch_semaphore 信号量

其他功能：

- 起到阻塞线程的作用
- 实现定时器功能

### pthread_mutex 互斥锁

和信号量的实现原理类似，也是阻塞线程并进入睡眠，需要进行上下文切换

~~~C
pthread_mutexattr_t attr;
pthread_mutexattr_init(&attr);
pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_NORMAL);

pthread_mutex_t lock;
pthread_mutex_init(&lock, &attr); // 设置属性

pthread_mutex_lock(&lock); // 上锁
//需要执行的代码
pthread_mutex_unlock(&lock); // 解锁
~~~

### NSLock 互斥锁、对象锁

NSLock在内部封装了一个pthread_mutex，属性为PTHREAD_MUTEX_ERRORCHECK

~~~ObjC
NSLock *lock = [NSLock new];

[lock lock];
//需要执行的代码
[lock unlock];
~~~

### NSCondition 条件锁、对象锁

NSCondition封装了一个互斥锁和条件变量。互斥锁保证线程安全，条件变量保证执行顺序。

~~~ObjC
NSCondition *lock = [NSCondition new];

[lock lock];
//需要执行的代码
[lock unlock];
~~~

### pthread_mutex(recursive)递归锁

pthread_mutex 锁的一种，属于递归锁。一般一个线程只能申请一把锁，但是，如果是递归锁，则可以申请申请多把锁，只要上锁和解锁的操作数量等量就不会报错。

~~~C
pthread_mutexattr_t attr:
pthread_mutexattr_init(&attr);
pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);

pthread_mutex_t lock;
pthread_mutex_init(&lock, &attr); //设置属性

pthread_mutex_lock(&lock); //上锁
//需要执行的代码
pthread_mutex_unlock(&lock); //解锁
~~~

递归锁可以被同一线程多次请求，而不会引起死锁。即在同一线程中在未解锁之前还可以上锁，执行锁中的代码。主要用于循环/递归操作中

### NSRecursiveLock 递归锁、对象锁

pthread_mutex(recursive)的封装

~~~Objc
NSRecursiveLock *lock = [NSRecursiveLock new];

[lock lock];
//需要执行的代码
[lock unlock];
~~~

### NSConditionLock 条件锁、对象锁

NSConditionLock借助NSCondition来实现，本质是生产者-消费者模型。

~~~ObjC
NSConditionLock *lock = [NSConditionLock new];

[lock lock];
//需要执行的代码
[lock unlock];
~~~


### @synchronized 条件锁/互斥

一个对象层面的锁，锁住了整个对象，底层使用了互斥递归锁来实现。

当上一个线程的任务没有执行完毕的时候(被锁住),那么下一个线程会进入睡眠状态等待任务执行完毕，当上一个线程的任务执行完毕，下一个线程会自动唤醒然后执行任务。

注意点:

- 如果多线程访问同一个资源，那么必须使用同一把锁才能锁住。
- 在开发中，尽量不要加锁，能在服务端做尽量在服务端做，如果必须要加锁，一定要记住，锁的范围不能太大，哪里有安全隐患就加在哪里。
- 因为必须使用同一把锁，开发中如果需要加锁，直接使用self即可。

~~~ObjC
NSObject *object = [NSObject new];

@synchronized(object) {
	//需要执行的代码
}
~~~

### atomic 自旋锁

比较适合做一些不耗时的操作

注意点: 只会给setter方法加锁，并不会给getter方法加锁

## 原理

### 自旋锁的实现原理

[原理](https://blog.csdn.net/syh96123/article/details/106855594/)

自旋锁的实现思路很简单，理论上来说只要定义一个全局变量，用来表示锁的可用情况即可，伪代码如下：
~~~C
bool lock = false; // 一开始没有锁上，任何线程都可以申请
do {
	while(lock); // 如果lock为true就一直死循环，相当于申请锁
	lock = true; //挂上锁，这样别的线程就无法获得锁
		Critical secion // 临界区
	lock = false; //相当于释放锁，这样别的线程可以进入临界区
		Reminder section // 不需要锁保护的代码
}
~~~

上述的代码存在一个问题：如果一开始有多个线程同时执行while循环，他们都不会在这里卡住，而是继续执行，这样无法保证锁的可靠性了。解决思路也很简单，只要确保申请锁的过程是原子操作即可。

狭义上的原子操作表示一条不可打断的操作，也就是说线程在执行操作的过程中，不会被操作系统挂起，而是一定会执行完。在单处理器环境下，一条汇编指令显然是原子操作，因为中断也要通过指令来实现。

然而在多处理器的情况下，能够被多个处理器同时执行的操作仍然算不上原子操作。因此，真正的原子操作必须由硬件提供支持，比如x86平台上如果在指令前面加"LOCK"前缀，对应的机器码在执行时会把总线锁住，使得其他CPU不能执行相同操作，从硬件层面确保来操作的原子性。

上述申请锁的过程，可以用一个原子性操作test_and_set来完成，它用伪代码可以这样表示:
~~~C
bool test_and_set(bool *target) {
	bool rv = *target;
	*target = TRUE;
	return rv;
}
~~~

在具体实现时，它通过一个原子性指令来完成。

自旋锁的实现原理:
~~~C
bool lock = false; // 一开始没有锁上，任何线程都可以申请锁  
do {  
    while(test_and_set(&lock); // test_and_set 是一个原子操作
        Critical section  // 临界区
    lock = false; // 相当于释放锁，这样别的线程可以进入临界区
        Reminder section // 不需要锁保护的代码        
}
~~~

### 信号量

[OC-底层原理 25:GCD 之 底层原理分析](https://www.jianshu.com/p/9cac2f1777e6)

持有计数的信号，使用计数来实现锁的功能，计数小于0时等待，计数为0或者大于0时，计数减1则不等待。
~~~Objc
dispatch_semaphore_create(long value); // 创建信号量持有value数值
dispatch_semaphore_signal(dispatch_semaphore_t dsema); // 发送一次信号量，数值+1, 数值>=0 则通过
dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_semaphore_t timeout); //等待信号量，数值-1，数值<0 则阻塞线程
~~~

具体的等待操作在lll_futex_wait函数中实现，III是low level lock的简称。这个函数通过汇编代码实现，调用到SYS_futex这个系统调用，使线程进入休眠状态，主动让出时间片。

主动让出时间片并不是总是代表效率高。让出时间片会导致操作系统切换到另一个线程，这种上下文切换通常要10微秒左右，而且至少需要切换两次。如果等待时间很短，比如只有几个微秒，忙等就比线程休眠更高效。

### 互斥锁

pthread表示POSIX thread，定义了一组跨平台的线程相关的API，pthread_mutex表示互斥锁。互斥锁的实现原理与信号量非常相似，不是使用忙等，而是阻塞线程并休眠，需要进行上下文切换。

一般情况下，一个线程只能申请一次锁，也只能在获得锁的情况下才能释放锁，多次申请锁或释放未获得的锁都会导致崩溃。假设在已经获得锁的情况下再次申请锁，线程会因为等待锁的释放而进入睡眠状态，因此就不可能再释放锁，从而导致死锁。

然后这种情况经常会发生，比如某个函数申请了锁，在临界区又递归调用了自己。幸运的是pthread_mutex支持递归锁，也就是允许一个线程递归的申请锁，只要把 attr 的类型改成 PTHREAD_MUTEX_RECURSIVE 即可。

互斥锁在申请锁时，调用了 pthread_mutex_lock 方法，它在不同的系统上实现各有不同，有时候它的内部是使用信号量来实现，即使不用信号量，也会调用到 lll_futex_wait 函数，从而导致线程休眠。

上文说到如果临界区很短，忙等的效率也许更高，所以在有些版本的实现中，会首先尝试一定次数(比如 1000 次)的 testandtest，这样可以在错误使用互斥锁时提高性能。

由于 pthread_mutex 有多种类型，可以支持递归锁等，因此在申请加锁时，需要对锁的类型加以判断，这也就是为什么它和信号量的实现类似，但效率略低的原因。

### NSLock

NSLock 只是在内部封装了一个 pthread_mutex，属性为 PTHREAD_MUTEX_ERRORCHECK，它会损失一定性能换来错误提示。

这里使用宏定义的原因是，OC 内部还有其他几种锁，他们的 lock 方法都是一模一样，仅仅是内部 pthread_mutex 互斥锁的类型不同。通过宏定义，可以简化方法的定义。

NSLock 比 pthread_mutex 略慢的原因在于它需要经过方法调用，同时由于缓存的存在，多次方法调用不会对性能产生太大的影响。

### NSCondition

NSCondition的底层是通过条件变量pthread_cond_t来实现的。条件变量有点像信号量，提供了线程阻塞与信号机制，因此可以用来阻塞某个线程，并等待某个数据就绪，然后唤醒线程。

[为什么要使用条件变量](https://blog.csdn.net/syh96123/article/details/106855594/)

### NSRecursiveLock

递归锁也是通过pthread_mutex_lock函数来实现，在函数内部会判断锁的类型，如果是递归锁，就允许递归调用，仅仅将一个计数器加一，锁的释放过程也是同理。

### @synchronized

OC层面的锁，主要是通过牺牲性能换来语法上的简洁和可读。

@synchronized后面需要紧跟一个OC对象，它实际上是把这个对象当作锁来使用。这是通过一个哈希表来实现的，OC在底层使用了一个互斥锁的数组(你可以理解为锁池)，通过对 对象去哈希值来得到对应的互斥锁。
