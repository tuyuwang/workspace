---
layout: default
title: 架构
nav_order: 9
parent: 面试
---

## 组件化

组件化就是将单一工程的项目按照功能职责或者业务职责划分成一个一个模块。

解决的目标：
- 代码耦合严重
- 编译时间太长导致开发效率低

进行组件化的时机：当项目到达一定规模后，开始出现相对独立的业务，团队人员开始增加，单一的项目开发模式成为了开发效率的瓶颈。

方案：
- 基于target-action的方式(CTMediator):通过类扩展生成对应模块入口类的类对象调用对应的action方法
- 基于router的方式(MGJRouter,HHRouter):基于注册router的方式，在项目启动的时候去注册组件和对应的router,调用组件通过类OpenURL方式，并传递复杂参数

以上原理都是通过OC的反射机制去获取对应的组件入口类调用对应的方法,从而达到解耦的目的。也容易出现一个问题也是实际中遇到过的问题,就是当你新建一个组件,在主项目中引用,但是开发同事也不知道这个事,代码开发编译打包上线都是不会报错的,只有到线上功能无法使用了才会知道.

## MVVM

优势：
- 低耦合：View可以独立于模型变化和修改，一个viewModel可以绑定到不同的view上
- 可重用性：可以把一些视图逻辑放在一个viewModel里面，让其他重用这段时图逻辑
- 独立开发：开发人员可以专注于业务逻辑和数据的开发viewModel，设计人员可以专注于页面设计
- 可测试：通常界面是比较难以测试的，而MVVM模式可以针对viewModel来进行测试

缺点：
- bug难以被调试：数据绑定使得一个位置的bug被快速传递到别的位置，要定位原始出问题的地方比较麻烦
- 数组内容转化成本较高：数组里面的每项都要转化成项目对象
- 同一API的数据被不同视图展示时，难以控制数据转化的代码，它们有可能会散落在任何需要的地方

> MVVM让视图逻辑和业务逻辑完全分离，View层专注展示，ViewModel层专注业务，容易并行开发，优点是业务逻辑集中、模块结构相对统一、好维护，易上手，单元测试可以做到ViewModel层，不再跟UI纠缠不清，模块的复用度也更高。

## 参考
- [iOS组件化思考,什么是组件化,组件化想解决的问题是什么?](https://www.jianshu.com/p/9fe2e96c097a)
- [iOS 中MVVM的理解
](https://blog.csdn.net/xueshangzhiying_iOS/article/details/80312369)