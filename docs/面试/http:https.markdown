---
layout: default
title: http/https
nav_order: 6
parent: 面试
---

## Http

http: 超文本传输协议，是一个基于请求和响应模式的、无状态的、应用层的协议，基于TCP的连接方式。是互联网上应用最为广泛的一种网络协议。

由三部分组成：请求行、消息头、请求正文。

设计http最初目的是为了提供一种发布和接收html页面的方法。它可以使浏览器更加高效。http协议是以明文方式发送信息的，如果黑客截取了Web浏览器和服务器之间的传输报文，就可以直接获得其中的信息。

### http原理：
1、客户端的浏览器首先要通过网络与服务器建立连接，该连接是通过TCP来完成的，一般TCP连接的端口是80.建立连接后，客户端发送一个请求给服务器，请求方式的格式为：统一资源标识符(URL)、协议版本号，后边是MIME信息包括服务器信息、实体信息和可能的内容。
2、服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号，一个成功或错误的代码，后边是MIME信息包括服务器信息、实体信息和可能的内容。

### 常用http方法

- GET: 用于请求访问已经被URL识别的资源，可以通过URL传参给服务器。
- POST: 用于传输信息给服务器，主要功能与GET方法类似，但一般推荐使用POST方式。
- PUT: 传输文件，报文主体包含文件内容，保存到对应URL位置。
- HEAD: 获得报文首部，与GET方法类似，只是不返回报文主体，一般用于验证URL是否有效。
- DELETE: 删除文件，与PUT方法相反，删除对应URL位置文件。
- OPTIONS: 查询相应URL支持的HTTP方法。

### GET和POST方法区别

- get重点在从服务器上获取资源，post重点在向服务器发送数据
- get传输数据是通过URL请求，以field（字段）= value的形式，置于URL后，用？连接，这个过程用户是客户可见的；post传输数据通过http的post机制，将字段与对应值封存在请求实体中发送给服务器，这个过程对用户是不可见的
- Get传输数据量小，因为受URL长度限制，但效率较高，Post可以传输大量数据，所以上传文件时用Post方式
- get是不安全的，因为URL是可见的，可能会泄露私密信息，如密码等，post较get安全性高些
- get方式只能支持ASCII字符，向服务器传的中文字符可能会乱码；post支持标准字符集，可以正确传递中文字符。

### http请求报文和响应报文格式

请求报文：
- 请求行：包含请求方法、URL、HTTP版本信息
- 请求首部字段
- 请求内容实体

响应报文：
- 状态行：包含HTTP版本、状态码、状态码的原因短语
- 响应首部字段
- 响应内容实体

### 常见的HTTP相应状态码
- 1xx: 指示信息-表示请求已接收，继续处理
- 2xx: 成功- 表示请求已被成功接收、理解、接收
- 3xx: 重定向 要完成请求必须进行更进一步的操作
- 4xx: 客户端错误 请求有语法错误或请求无法实现 
- 5xx: 服务器端错误 服务器未能实现合法的请求
- 200: 请求被正常处理
- 204: 请求受理但没有资源可以返回
- 206: 客户端只是请求资源的一部分，服务器只对请求的部分资源执行GET方法，相应报文中通过Content-Range指定范围的资源
- 301: 永久性重定向
- 302: 临时重定向
- 303: 与302状态码有相似的功能，只是它希望客户端在请求一个URL的时候，能通过GET方法重定向到另一个URL上
- 304: 发送附带条件的请求时，条件不满足时返回，与重定向无关
- 307: 临时重定向，与302类似，只是强制要求使用POST方法
- 400: 请求报文语法有误，服务器无法识别
- 401: 请求需要认证
- 403: 请求的对应资源禁止被访问
- 404: 服务器无法找到对应资源
- 500: 服务器内部错误
- 503: 服务器正忙

### 常见HTTP首部字段
1、通用首部字段（请求报文与响应报文都会使用的首部字段）
- Date: 创建报文时间
- Connection: 连接的管理
- Cache-Control: 缓存的控制
- Transfer-Encodeing: 报文主体的传输编码方式

2、请求首部字段（请求报文会使用的首部字段）
- Host: 请求资源所在的服务器
- Accept: 可处理的媒体类型
- Accept-Charset: 可接受的字符集
- Accept-Encoding: 可接受的内容编码
- Accept-Language: 可接受的自然语言

3、响应首部字段（响应报文会使用的首部字段）
- Accept-Ranges: 可接收的字节范围
- Location: 令客户端重新定向到的URL
- Server: HTTP服务器的安装信息

4、实体首部字段（请求报文与响应报文的实体部分使用的首部字段）
- Allow: 资源可支持的HTTP方法
- Content-Type: 实体主类的类型
- Content-Encoding: 实体主体适用的编码方式
- Content-Language: 实体主体的自然语言
- Content-Length: 实体主体的字节数
- Content-Range: 实体主体的位置范围，一般用于发出部分请求时使用

### HTTP的缺点
- 通信使用明文不加密，内容可能被窃听
- 不验证通信方身份，肯能遭到伪装
- 无法验证报文完整性，可能被篡改

### HTTP优化
- 利用负载均衡优化和加速HTTP应用
- 利用HTTP Cache来优化网站

### 三次握手与四次挥手

握手：
- 建立连接时，客户端发送同步序列编号到服务器，并进入发送状态，等待服务器确认
- 服务器收到同步序列编号，确认并同时自己也发送一个同步序列编号+确认标志，此时服务器进入接收状态
- 客户端收到服务器发送的包，并向服务器发送确认标志，随后连接成功

挥手:
- 客户端向服务器发送一个带有结束标记的报文
- 服务器收到报文后，向客户端发送一个确认序号，同时通知自己相应的应用程序，对方要求关闭连接。
- 服务器向客户端发送一个带有结束标记的报文
- 客户端收到报文后，向服务器发送一个确认序号，连接关闭。

### http发送请求的流程

- 客户端根据URL的IP和端口判断最近有没有访问过该URL,通过DNS将域名解析成IP地址，三次握手建立TCP连接
- 要发送的报文会以流的形式通过打开的TCP连接传输，TCP层收到数据流后把数据切断封装在IP分组中，也就是传输层数据报。(IP头部[源IP地址，目的IP地址，长度，分组ID，校验和等]、TCP头部[源端口号，目的端口号、TCP段序号(用于数据排序)、校验和等]和TCP数据块)
- 应用程序将要发送的数据写入进程的内存地址
- 程序通过系统函数库接口做系统调用，系统内核将数据从用户内存取出放入内核缓冲区的内存地址空间，然后通知网卡控制器
- 网卡控制器根据网卡驱动信息得到内核缓冲区地址，将数据复制到网卡缓冲区
- 网卡中数据由字节单位转换为二进制，便于下一步电信号的传输，再将信号发送到线路
- 数据查询ip地址，如果在本地局域网，假设星型网络拓扑，通过自身所在的局域网的路由器中转，转发到相应的服务器
- 绝大多数目标服务器不在本地局域网，通过本地局域网路由器转发，在经过寻址，中转的路由器，转发到IDC(Internet Data Center)控制的服务器所在局域网的路由器
- 数据在转到相应交换机的高速缓冲区，其中遵循存储转发机制
- 由交换机发送到服务器
- 服务器处理、查询、返回数据


## HTTPS

https就是http加上SSL加密处理（一般是SSL安全通信线路）+ 认证 + 完整性保护.

https的安全基础是SSL,SSL协议位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。SSL协议可分为两层： SSL记录协议（SSL Record Protocol）,它建立在可靠的传输协议（如TCP）之上，为高层协议提供封装、压缩、加密等基本功能的支持。SSL握手协议（SSL Handshake Protocol），它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。

https的SSL过程

1、客户端使给出协议版本号、客户端生成的随机数、以及客户端支持的加密方法，要求与服务器建立SSL连接

2、服务器收到客户端的请求后，确认双方使用的加密方法，并把公钥放在证书中与服务器生成的随机数一起发给客户端

3、客户端确认数字证书有效，然后生成一个新的随机数，并使用数字证书中的公钥加密这个随机数，并发给服务器

4、服务器用自己的私钥解密出新发的随机数

5、客户端与服务端根据约定的加密方法，使用前面三个随机数，生成对话密钥

6、服务器利用会话密钥加密与客户端之间的通信

https连接过程

1、客户端的浏览器向服务器发送请求，并传送客户端SSL协议的版本号，加密算法种类，产生的随机数，以及其他服务器和客户端之间通讯所需要的各种信息

2、服务器向客户端传送SSL协议的版本号，加密算法种类，随机数以及其他相关信息，同时服务器还将向客户端传送自己的证书

3、客户端利用服务器传过来的信息验证服务器的合法性，服务器的合法性包括：证书是否过期，发行服务器证书的CA是否可靠，发行者证书的公钥能否正确解开服务器证书的发行者的数字签名，服务器证书上的域名是否和服务器的实际域名相匹配。如果合法性验证没有通过，通讯将断开，如果合法性验证通过，将继续进行第四步。

4、用户端随机产生一个用于通讯的对称密码，然后用服务器的公钥对其加密，然后将加密后的预主密码传给服务器

5、如果服务器要求客户的身份认证(在握手过程中为可选)，用户可以建立一个随机数然后对其进行数据签名，将这个含有签名的随机数和客户自己的证书以及加密过的预主密码一起传给服务器。

6、如果服务器要求客户的身份认证，服务器必须校验客户证书和签名随机数的合法性，具体的合法性验证过程包括：客户的证书使用日期是否有效，为客户提供证书的CA是否可靠，发行CA的公钥能否正确解开客户证书的发行CA的数字签名，检查客户的证书是否在证书废止列表中。校验如果没有通过，通讯立刻中断，如果验证通过，服务器将用自己的私钥解开加密的预主密码，然后执行一系列步骤来产生主通讯密码（客户端也将通过同样的方法产生相同的主通讯密码）

7、服务器和客户端用相同的主密码即通话密码，一个对称密钥用于SSL协议的安全数据通讯的加解密通讯。同时在SSL通讯过程中还要完成数据通讯的完整性，防止数据通讯中的任何变化。

8、客户端向服务器端发出信息，指明后面的数据通讯将使用的步骤7中的主密码为对称密钥，同时通知服务器客户端的握手过程结束。

9、服务器向客户端发出信息，指明后面的数据通讯将使用的步骤7中的主密码为对称密钥，同时通知客户端服务器端的握手过程结束。

10、SSL的握手部分结束，SSL安全通道的数据通讯开始，客户和服务器开始使用相同的对称密钥进行数据通讯，同时进行通讯完整性的校验。

### https设计目标
- 数据保密性： 保证数据内容在传输的过程中不会被第三方查看。
- 数据的完整性： 及时发现被第三方篡改的传输内容
- 身份校验安全性： 保证数据到达用户期望的目的地

### https原理：

1、客户端将它所支持的算法列表和一个用作产生密钥的随机数发送给服务器

2、服务器从算法列表中选择一种加密算法，并将它和一份包含服务器公用密钥的证书发送给客户端，该证书还包含了用于认证目的服务器标识，服务器同时还提供了一个用作产生密钥的随机数

3、客户端对服务器的证书进行验证，并抽取服务器公用密钥，然后再产生一个称作pre_master-secret的随机密码串，并使用服务器的公用密钥对其进行加密，并将加密后的信息发送给服务器

4、客户端与服务器端根据pre_master_secret以及客户端与服务器的随机数值独立计算出加密和MAC密钥

5、客户端将所有握手消息的MAC值发送给服务器

6、服务器将所有握手消息的MAC值发送给客户端

### http与https的区别
- https协议需要CA(Certificate Authority, 证书颁发机构)申请证书，一般免费证书比较少，因而需要一定费用。
- http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议  
- http和https使用的是完全不同的连接方式，用的端口不一样，前者是80，后者是443
- http是连接简单，是无状态的。https协议是SSL+http协议构建的可进行加密传输，身份认证的网络协议，比http协议安全(无状态意思是其他数据包的发送、传输和接收都是相互独立的。无连接的意思是指通信双方都不长久维持对方的任何信信)

### https相对于http的改进
1、双向的身份认证
- 客户端发起SSL握手消息给服务器要求连接
- 服务端将证书发送给客户端
- 客户端检查服务端证书，确认是否由自己信任的证书签发机构签发。如果不是，将是否继续通讯的决定权交给用户选择(注意，这里将是一个安全缺陷)。如果检查无误或者用户选择继续，则客户端认可服务端的身份。
- 服务端要求客户端发送证书，并检查是否通过验证。失败则关闭连接，认证成功则从客户端证书中获得客户端的公钥，一般为1024位或者2048位。到此，服务器客户端双方的身份认证结束，双方确保身份都是真实可靠的。

2、数据传输的机密性
客户端和服务端在开始传输数据之前，会协商传输过程需要使用的加密算法。客户端发送协商请求给服务器，其中包含自己支持的非对称加密的密钥交换算法(一般是RSA)，数据签名摘要算法（一般是SHA或者MD5），加密传输数据的对称加密算法(一般是DES),以及加密密钥的长度。服务端收到消息之后，选中安全性最高的算法，并将选中的算法发送给客户端，完成协商。客户端生成随机的字符串，通过协商好的非对称加密算法，使用服务端的公钥对字符串进行加密，发送给服务端。服务端接收到之后，使用自己的私钥解密得到该字符串。在随后的数据传输当中，使用这个字符串作为密钥进行对称加密。

3、防止重放攻击
SSL使用序列号来保护通讯方免受报文重发攻击。这个序列号被加密后作为数据包的负载。在整个SSL握手中，都有一个唯一的随机数来标记SSL握手。这样防止来攻击者嗅探整个登陆过程，获取到加密的登陆数据之后，不对数据进行解密，而直接重传登陆数据包的攻击手法。

### https的优点
- 使用https协议可认证用户和服务器，确保数据发送到正确的客户端和服务器
- https协议是由SSL+http协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中被窃取、修改，保证数据的完整性。
- https是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击成本

### https的缺点(对比优点)
- https协议握手阶段比较费时，会使页面的加载时间延长
- https连接缓存不如http高效,会增加数据开销，甚至已有的安全措施也会因此而收到影响
- https协议的安全是由范围的，在黑客攻击、拒绝服务攻击和服务器劫持等方面几乎起不到什么作用
- SSL证书通常需要绑定IP,不能在同一IP上绑定多个域名，IPv4资源不可能支持这个消耗
- 成本增加，部署https后，因为https协议的工作需要增加额外的计算机资源消耗，例如SSL协议加密算法和SSL交互次数将占用一定的计算资源和服务器成本。
- https协议的加密范围也比较有。最关键的是SSL证书的信用链体系并不安全，特别是某些国家可以控制CA根证书的情况下，中间人攻击一样可行





## 参考

- [HTTP协议-HTTPS协议](https://blog.csdn.net/wuhuagu_wuhuaguo/article/details/78507762)
- [http和https的区别](https://blog.csdn.net/qq_38289815/article/details/80969419)
- [图解SSL/TLS协议](http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html)
- [所谓的HTTP请求，到底都干了什么](https://blog.51cto.com/mounting/1657680?source=dra)